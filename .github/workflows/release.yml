name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'  # Allow pre-release tags like v1.0.0-alpha
  workflow_dispatch:
    inputs:
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      tag:
        description: 'Tag to release (leave empty for latest commit)'
        required: false
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: stacks-linux-x86_64
            cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: stacks-linux-aarch64
            cross: true
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: stacks-macos-x86_64
            cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: stacks-macos-aarch64
            cross: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build binary
        run: |
          if [[ "${{ matrix.cross }}" == "true" ]]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Prepare binary
        run: |
          cp target/${{ matrix.target }}/release/stacks ${{ matrix.binary_name }}
          strip ${{ matrix.binary_name }} || true
          chmod +x ${{ matrix.binary_name }}

      - name: Generate checksum
        run: |
          sha256sum ${{ matrix.binary_name }} > ${{ matrix.binary_name }}.sha256

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: |
            ${{ matrix.binary_name }}
            ${{ matrix.binary_name }}.sha256
          retention-days: 1

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tmux fzf

      - name: Run tests
        run: cargo test --all-features

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -W clippy::all

      - name: Check formatting
        run: |
          cargo fmt -- --check || echo "Warning: Code formatting issues found but continuing build"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: |
          cargo audit || echo "Warning: Security audit found issues but continuing build"

  release:
    name: Create Release
    needs: [build, test, security]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "stacks-*" -type f -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Create tag for manual dispatch
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.tag != ''
        run: |
          git tag ${{ github.event.inputs.tag }}
          git push origin ${{ github.event.inputs.tag }}

      - name: Generate changelog
        id: changelog
        run: |
          if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
            PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
            echo "## What's Changed" > CHANGELOG.md
            git log --pretty=format:"- %s" $PREV_TAG..HEAD >> CHANGELOG.md
          else
            echo "## What's Changed" > CHANGELOG.md
            echo "- Initial release with enhanced tmux integration and config system" >> CHANGELOG.md
            echo "- Interactive configuration editor with dropdown menus" >> CHANGELOG.md  
            echo "- Intelligent tmux session detection and management" >> CHANGELOG.md
            echo "- Quad-split, horizontal-split, and multi-window tmux layouts" >> CHANGELOG.md
            echo "- Skim-based fuzzy navigation for tmux windows" >> CHANGELOG.md
          fi
          
          echo 'changelog<<EOF' >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ github.event.inputs.prerelease || false }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}